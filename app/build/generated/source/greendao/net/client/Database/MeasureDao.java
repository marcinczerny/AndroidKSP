package net.client.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "measurement".
*/
public class MeasureDao extends AbstractDao<Measure, Long> {

    public static final String TABLENAME = "measurement";

    /**
     * Properties of entity Measure.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, Long.class, "date", false, "date");
        public final static Property Humidity = new Property(2, Float.class, "humidity", false, "humidity");
        public final static Property Pressure = new Property(3, Float.class, "pressure", false, "pressure");
        public final static Property Temperature = new Property(4, Float.class, "temperature", false, "temperature");
    }


    public MeasureDao(DaoConfig config) {
        super(config);
    }
    
    public MeasureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"measurement\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"date\" INTEGER," + // 1: date
                "\"humidity\" REAL," + // 2: humidity
                "\"pressure\" REAL," + // 3: pressure
                "\"temperature\" REAL);"); // 4: temperature
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"measurement\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Measure entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date);
        }
 
        Float humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindDouble(3, humidity);
        }
 
        Float pressure = entity.getPressure();
        if (pressure != null) {
            stmt.bindDouble(4, pressure);
        }
 
        Float temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindDouble(5, temperature);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Measure entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date);
        }
 
        Float humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindDouble(3, humidity);
        }
 
        Float pressure = entity.getPressure();
        if (pressure != null) {
            stmt.bindDouble(4, pressure);
        }
 
        Float temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindDouble(5, temperature);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Measure readEntity(Cursor cursor, int offset) {
        Measure entity = new Measure( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // humidity
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // pressure
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4) // temperature
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Measure entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setHumidity(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setPressure(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setTemperature(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Measure entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Measure entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Measure entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
